/[ \t\n]/     { /* Skip spaces and tabs. */ }
/\-\-[^\n]*/  { /* Comments. */ }
/(var)/ { loggo.Debug("VAR_BEGIN"); return VAR_BEGIN }
/(return)/ { loggo.Debug("RETURN"); return RETURN }
/(break)/ { loggo.Debug("BREAK"); return BREAK }
/(func)/ { loggo.Debug("FUNC"); return FUNC }
/(fake)/ { loggo.Debug("FAKE"); return FAKE }
/(while)/ { loggo.Debug("WHILE"); return WHILE }
/(for)/ { loggo.Debug("FOR"); return FOR }
/(true)/ { loggo.Debug("FTRUE"); return FTRUE }
/(false)/ { loggo.Debug("FFALSE"); return FFALSE }
/(if)/ { loggo.Debug("IF"); return IF }
/(then)/ { loggo.Debug("THEN"); return THEN }
/(else)/ { loggo.Debug("ELSE"); return ELSE }
/(elseif)/ { loggo.Debug("ELSEIF"); return ELSEIF }
/(end)/ { loggo.Debug("END"); return END }
/(const)/ { loggo.Debug("FCONST"); return FCONST }
/(package)/ { loggo.Debug("PACKAGE"); return PACKAGE }
/(null)/ { loggo.Debug("NULL"); return FNULL }
/(include)/ { loggo.Debug("INCLUDE"); return INCLUDE }
/(struct)/ { loggo.Debug("STRUCT"); return STRUCT }
/(and)/ { loggo.Debug("AND"); return AND }
/(or)/ { loggo.Debug("OR"); return OR }
/(is)/ { loggo.Debug("IS"); return IS }
/(not)/ { loggo.Debug("NOT"); return NOT }
/(continue)/ { loggo.Debug("CONTINUE"); return CONTINUE }
/(yield)/ { loggo.Debug("YIELD"); return YIELD }
/(sleep)/ { loggo.Debug("SLEEP"); return SLEEP }
/(switch)/ { loggo.Debug("SWITCH"); return SWITCH }
/(case)/ { loggo.Debug("CASE"); return CASE }
/(default)/ { loggo.Debug("DEFAULT"); return DEFAULT }
/\"(\\"|[^\"])*\"/ { loggo.Debug("STRING_DEFINITION"); lval.s = yylex.Text(); return STRING_DEFINITION;}
/[a-zA-Z_][a-zA-Z0-9_]*/ { loggo.Debug("IDENTIFIER"); lval.s = yylex.Text(); return IDENTIFIER;}
/[a-zA-Z_][a-zA-Z0-9_]*(\.[a-zA-Z_][a-zA-Z0-9_]*)+/ { loggo.Debug("IDENTIFIER_DOT"); lval.s = yylex.Text(); return IDENTIFIER_DOT;}
/[a-zA-Z_][a-zA-Z0-9_]*(\-\>[a-zA-Z_][a-zA-Z0-9_]*)+/ { loggo.Debug("IDENTIFIER_POINTER"); lval.s = yylex.Text(); return IDENTIFIER_POINTER;}
/[0-9]+u/ { loggo.Debug("FKUUID"); lval.s = yylex.Text(); return FKUUID;}
/-?[0-9]+/ { loggo.Debug("NUMBER"); lval.s = yylex.Text(); return NUMBER;}
/-?[0-9]+\.[0-9]+([Ee]-?[0-9]+)?/ { loggo.Debug("FKFLOAT"); lval.s = yylex.Text(); return FKFLOAT;}
/(\%)/ { loggo.Debug("DIVIDE_MOD"); return DIVIDE_MOD }
/(\,)/ { loggo.Debug("ARG_SPLITTER"); return ARG_SPLITTER }
/(\-\>)/ { loggo.Debug("RIGHT_POINTER"); return RIGHT_POINTER }
/(\+\+)/ { loggo.Debug("INC"); return INC }
/(\+)/ { loggo.Debug("PLUS"); return PLUS }
/(\-)/ { loggo.Debug("MINUS"); return MINUS }
/(\/)/ { loggo.Debug("DIVIDE"); return DIVIDE }
/(\*)/ { loggo.Debug("MULTIPLY"); return MULTIPLY }
/(\:\=)/ { loggo.Debug("NEW_ASSIGN"); return NEW_ASSIGN }
/(\+\=)/ { loggo.Debug("PLUS_ASSIGN"); return PLUS_ASSIGN }
/(\-\=)/ { loggo.Debug("MINUS_ASSIGN"); return MINUS_ASSIGN }
/(\/\=)/ { loggo.Debug("DIVIDE_ASSIGN"); return DIVIDE_ASSIGN }
/(\*\=)/ { loggo.Debug("MULTIPLY_ASSIGN"); return MULTIPLY_ASSIGN }
/(\%\=)/ { loggo.Debug("DIVIDE_MOD_ASSIGN"); return DIVIDE_MOD_ASSIGN }
/(\=)/ { loggo.Debug("ASSIGN"); return ASSIGN }
/(\>)/ { loggo.Debug("MORE"); return MORE }
/(\<)/ { loggo.Debug("LESS"); return LESS }
/(\>\=)/ { loggo.Debug("MORE_OR_EQUAL"); return MORE_OR_EQUAL }
/(\<\=)/ { loggo.Debug("LESS_OR_EQUAL"); return LESS_OR_EQUAL }
/(\=\=)/ { loggo.Debug("EQUAL"); return EQUAL }
/(\!\=)/ { loggo.Debug("NOT_EQUAL"); return NOT_EQUAL }
/(\()/ { loggo.Debug("OPEN_BRACKET"); return OPEN_BRACKET }
/(\))/ { loggo.Debug("CLOSE_BRACKET"); return CLOSE_BRACKET }
/(\:)/ { loggo.Debug("COLON"); return COLON }
/(\[)/ { loggo.Debug("OPEN_SQUARE_BRACKET"); return OPEN_SQUARE_BRACKET }
/(\])/ { loggo.Debug("CLOSE_SQUARE_BRACKET"); return CLOSE_SQUARE_BRACKET }
/(\{)/ { loggo.Debug("OPEN_BIG_BRACKET"); return OPEN_BIG_BRACKET }
/(\})/ { loggo.Debug("CLOSE_BIG_BRACKET"); return CLOSE_BIG_BRACKET }
/(\.\.)/ { loggo.Debug("STRING_CAT"); return STRING_CAT }
//
package fakego

import "github.com/esrrhs/go-engine/src/loggo"
